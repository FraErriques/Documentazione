/* 
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Other/SQLTemplate.sql to edit this template
 */
/**
 * Author:  fra
 * Created: Dec 12, 2021
 */




CREATE TABLE IF NOT EXISTS  public.dump2021Dez30
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    abscissa float,
    ordinate float,
    CONSTRAINT  dump2021Dez30_pkey PRIMARY KEY (id)
);


-- Table: public.dump2021dez30

-- DROP TABLE IF EXISTS public.dump2021dez30;

CREATE TABLE IF NOT EXISTS public.dump2021dez30
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    abscissa double precision,
    ordinate double precision,
    CONSTRAINT dump2021dez30_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.dump2021dez30
    OWNER to postgres;

-- PROCEDURE: public.usp_dump2021dez30_insert(double precision, double precision)

-- DROP PROCEDURE IF EXISTS public.usp_dump2021dez30_insert(double precision, double precision);

CREATE OR REPLACE PROCEDURE public.usp_dump2021dez30_insert(
	IN par_abscissa double precision,
	IN par_ordinate double precision)
LANGUAGE 'plpgsql'
AS $BODY$
begin
insert into dump2021Dez30(
abscissa,
ordinate   ) values(
Par_abscissa,
Par_ordinate );
commit;
end;
$BODY$;



create or replace procedure usp_dump2021Dez30_INSERT (
    Par_abscissa float,
    Par_ordinate float
)
language plpgsql    
as $$
begin
    insert into dump2021Dez30(
    --id
    abscissa,
    ordinate   ) values(
    Par_abscissa,
    Par_ordinate );
    commit;
end;$$
;


-- Table: public.accounts

-- DROP TABLE IF EXISTS public.accounts;

CREATE TABLE IF NOT EXISTS public.accounts
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    balance numeric(15,2) NOT NULL,
    CONSTRAINT accounts_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.accounts
    OWNER to postgres;



create or replace procedure transfer(
   sender int,
   receiver int, 
   amount dec
)
language plpgsql    
as $$
begin
    -- subtracting the amount from the sender's account 
    update accounts 
    set balance = balance - amount 
    where id = sender;

    -- adding the amount to the receiver's account
    update accounts 
    set balance = balance + amount 
    where id = receiver;

    commit;
end;$$
;

--that's a comment
postgres=# 
postgres=# insert into accounts(name,balance)
postgres-# values('Bob',10000);
INSERT 0 1
postgres=# 
postgres=# insert into accounts(name,balance)
postgres-# values('Alice',10000);
INSERT 0 1

-- Table: public.customers

-- DROP TABLE public.customers;

CREATE TABLE IF NOT EXISTS public.customers
(
    customer_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT customers_pkey PRIMARY KEY (customer_id)
)

TABLESPACE pg_default;

ALTER TABLE public.customers
    OWNER to postgres;

-- Table: public.contacts

-- DROP TABLE public.contacts;

CREATE TABLE IF NOT EXISTS public.contacts
(
    contact_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer,
    contact_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    phone character varying(15) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT contacts_pkey PRIMARY KEY (contact_id),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id)
        REFERENCES public.customers (customer_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.contacts
    OWNER to postgres;
