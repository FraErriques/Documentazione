#include "TheNode.h"
#include "../StringBuilder/StringBuilder.h"

    Common::Dictionary::TheNode::TheNode(//---- Ctor
        std::string &name,
        std::string &email,
        std::string &internal,
        std::string &cellPhone
                    )
        {//---- Ctor
            this->name = new std::string( name);
            this->email = new std::string( email);
            this->internal = new std::string( internal);
            this->cellPhone = new std::string( cellPhone);
        }// Ctor


    Common::Dictionary::TheNode::~TheNode()//----Dtor
    {//----Dtor
        std::cout<<"\n\t Entering the Node-Destructor \n";// DBG
        delete this->name;
        delete this->email;
        delete this->internal;
        delete this->cellPhone;
//        this->name = nullptr;  Don't do that on a NON-managed language: you just risk to loose the pointer
//        this->email = nullptr;// and there's no GarbageCollector to intervene.
//        this->internal = nullptr;
//        this->cellPhone = nullptr;
    }//----Dtor


    void Common::Dictionary::TheNode::internalPrint()
    {
        std::string emptyField("");
        std::cout<<"\n--------------Recapiti:";
        //--------------------------
        if( nullptr!=this->name
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->name) ))
            )
        {
            std::cout<<"\n\t Name: "<< *(this->name);
        }
        else
        {
            std::cout<<"\n\t Field Name is missing";
        }
        //--------------------------
        if( nullptr!=this->email
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->email) ) )
            )
        {
            std::cout<<"\n\t Email: "<< *(this->email);
        }
        else
        {
            std::cout<<"\n\t Field Email is missing";
        }
        //--------------------------
        if( nullptr!=this->internal
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->internal) ) )
            )
        {
            std::cout<<"\n\t Internal-Phone: "<< *(this->internal);
        }
        else
        {
            std::cout<<"\n\t Field Internal-Phone is missing";
        }
        //--------------------------
        if( nullptr!=this->cellPhone
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->cellPhone) ) )
           )
        {
            std::cout<<"\n\t Cellular-Phone: "<< *(this->cellPhone);
        }
        else
        {
            std::cout<<"\n\t Field Cellular-Phone is missing";
        }
        std::cout<<"\n----------------------------------------------\n";
    }// internalPrint()
   

/* cantina
    Common::Dictionary::TheNode::TheNode(//---- Ctor
        std::string &name,
        std::string &email,
        std::string &internal,
        std::string &cellPhone
                    )
        {//---- Ctor
            this->name = new std::string( name);
            this->email = new std::string( email);
            this->internal = new std::string( internal);
            this->cellPhone = new std::string( cellPhone);
        }// Ctor


    Common::Dictionary::TheNode::~TheNode()//----Dtor
    {//----Dtor
        std::cout<<"\n\t Entering the Node-Destructor \n";// DBG
        delete this->name;
        delete this->email;
        delete this->internal;
        delete this->cellPhone;
//        this->name = nullptr;  Don't do that on a NON-managed language: you just risk to loose the pointer
//        this->email = nullptr;// and there's no GarbageCollector to intervene.
//        this->internal = nullptr;
//        this->cellPhone = nullptr;
    }//----Dtor


    void Common::Dictionary::TheNode::internalPrint()
    {
        std::string emptyField("");
        std::cout<<"\n--------------Recapiti:";
        //--------------------------
        if( nullptr!=this->name
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->name) ))
            )
        {
            std::cout<<"\n\t Name: "<< *(this->name);
        }
        else
        {
            std::cout<<"\n\t Field Name is missing";
        }
        //--------------------------
        if( nullptr!=this->email
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->email) ) )
            )
        {
            std::cout<<"\n\t Email: "<< *(this->email);
        }
        else
        {
            std::cout<<"\n\t Field Email is missing";
        }
        //--------------------------
        if( nullptr!=this->internal
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->internal) ) )
            )
        {
            std::cout<<"\n\t Internal-Phone: "<< *(this->internal);
        }
        else
        {
            std::cout<<"\n\t Field Internal-Phone is missing";
        }
        //--------------------------
        if( nullptr!=this->cellPhone
             && emptyField.compare( Common::StrManipul::trimBoth( *(this->cellPhone) ) )
           )
        {
            std::cout<<"\n\t Cellular-Phone: "<< *(this->cellPhone);
        }
        else
        {
            std::cout<<"\n\t Field Cellular-Phone is missing";
        }
        std::cout<<"\n----------------------------------------------\n";
    }// internalPrint()
    
    ----------------#####
    Common::Dictionary::TheNode::TheNode(//---- Ctor
        std::string &name
                    )
        {//---- Ctor
            this->name = new int;
            int content = Common::StrManipul::stringToInt( name);
            *(this->name) = content;
        }// Ctor


    Common::Dictionary::TheNode::~TheNode()//----Dtor
    {//----Dtor
        std::cout<<"\n\t Entering the Node-Destructor \n";// DBG
        delete this->name;
//        this->name = nullptr;  Don't do that on a NON-managed language: you just risk to loose the pointer
//        this->email = nullptr;// and there's no GarbageCollector to intervene.
//        this->internal = nullptr;
//        this->cellPhone = nullptr;
    }//----Dtor


    void Common::Dictionary::TheNode::internalPrint()
    {
        std::string emptyField("");
        std::cout<<"\n--------------Recapiti:";
        //--------------------------
        if( nullptr!=this->name
            // not appliable && emptyField.compare( Common::StrManipul::trimBoth( *(this->name) ))
            )
        {
            std::cout<<"\n\t Name: "<< *(this->name);
        }
        else
        {
            std::cout<<"\n\t Field Name is missing";
        }
        std::cout<<"\n----------------------------------------------\n";
    }// internalPrint()
    

*/
